#include <iostream>
#include <vector>
#include <string>
#include <limits>

using namespace std;

struct Task {
    string description;
    bool completed;

    Task(const string& desc) : description(desc), completed(false) {}
};

vector<Task> tasks;

void displayTasks() {
    cout << "\n===== Tasks =====\n";
    if (tasks.empty()) {
        cout << "No tasks found.\n";
    } else {
        for (size_t i = 0; i < tasks.size(); ++i) {
            const Task& task = tasks[i];
            cout << i + 1 << ". ";
            if (task.completed) {
                cout << "[âœ“] ";
            } else {
                cout << "[ ] ";
            }
            cout << task.description << "\n";
        }
    }
}

void addTask() {
    cout << "\nEnter task description: ";
    string description;
    getline(cin >> ws, description);
    tasks.emplace_back(description);
    cout << "Task added successfully!\n";
}

void markTaskCompleted() {
    displayTasks();
    if (tasks.empty()) {
        cout << "No tasks available to mark as completed.\n";
        return;
    }

    cout << "\nEnter task number to mark as completed (0 to cancel): ";
    int index;
    cin >> index;
    if (index < 0 || index > static_cast<int>(tasks.size())) {
        cout << "Invalid task number. Please try again.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return;
    }

    if (index == 0) {
        cout << "Operation canceled.\n";
        return;
    }

    tasks[index - 1].completed = true;
    cout << "Task marked as completed.\n";
}

void removeTask() {
    displayTasks();
    if (tasks.empty()) {
        cout << "No tasks available to remove.\n";
        return;
    }

    cout << "\nEnter task number to remove (0 to cancel): ";
    int index;
    cin >> index;
    if (index < 0 || index > static_cast<int>(tasks.size())) {
        cout << "Invalid task number. Please try again.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return;
    }

    if (index == 0) {
        cout << "Operation canceled.\n";
        return;
    }

    tasks.erase(tasks.begin() + index - 1);
    cout << "Task removed successfully.\n";
}

int main() {
    char choice;

    do {
        cout << "\n===== To-Do List Manager =====\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // clear input buffer

        switch (choice) {
            case '1':
                addTask();
                break;
            case '2':
                displayTasks();
                break;
            case '3':
                markTaskCompleted();
                break;
            case '4':
                removeTask();
                break;
            case '5':
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != '5');

    return 0;
}
